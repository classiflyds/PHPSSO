<?php# This file contains functions for the websitetoolbox.com forum single sign on.# Initialize session.session_start(); # Replace USERNAME with your Website Toolbox username. If you are using a managed domain or a subdomain, use that instead of USERNAME.websitetoolbox.com. define("HOST","beta4.websitetoolbox.com");# Give API_KEY from your Website Toolbox SSO settingsdefine("API_KEY","rzbHTaTbCeO");#Purpose: Create a request using curl or file and getting response from the Website Toolbox.#parmeter: request URL which will use to make curl request#return: return response from the Website Toolbox#Scope: localfunction doHTTPCall($URL){	if (_checkBasicFunctions("curl_init,curl_setopt,curl_exec,curl_close")) {		$ch = curl_init("http://".HOST.$URL);        curl_setopt($ch, CURLOPT_HEADER, 0);        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        $response = curl_exec($ch);              curl_close($ch);	} else if (_checkBasicFunctions("fsockopen,fputs,feof,fread,fgets,fclose")) {		$fsock = fsockopen(HOST, 80, $errno, $errstr, 30);		if (!$fsock) {			echo "Error! $errno - $errstr";		} else {			$headers .= "POST $URL HTTP/1.1\r\n";			$headers .= "HOST: ".HOST."\r\n";			$headers .= "Connection: close\r\n\r\n";			fputs($fsock, $headers);			// Needed to omit extra initial information			$get_info = false;			while (!feof($fsock)) {				if ($get_info) {					$response .= fread($fsock, 1024);				} else {					if (fgets($fsock, 1024) == "\r\n") {						$get_info = true;					}				}			}			fclose($fsock);		}	}	return $response;}#Purpose: Function for filtering response xmlfunction filter_xml($matches) {	return trim(htmlspecialchars($matches[1]));} #Purpose: Check php basic functions exist or not#parmeter: functions list like fsockopen,fputs,feof,fread,fgets,fclose#Scope: localfunction _checkBasicFunctions($functionList){  $functions = split(",",$functionList);  foreach ($functions as $key=>$val) {  	$function = trim($val);  	if (!function_exists($function)) {		return false;	}  }  return true;} #Purpose: Function for forum SSO registration#parmeter: Array of user information required for forum sso registration#return: It returns user sso registration status response#Scope: local and global bothfunction forumSignup($user) {	# Changes the case of all keys in an array	$user = array_change_key_case($user);		foreach ($user as $key => $value) {	  if ($value === NULL)		 $user[$key] = '';	}	# Generating a URL-encoded query string from the $user array.		$parameters = http_build_query($user, NULL, '&');   	$URL = "/register/create_account?apikey=".API_KEY."&".$parameters;	# making a request using curl or file and getting response from the Website Toolbox.	$response = doHTTPCall($URL);	$response_xml = preg_replace_callback('/<!\[CDATA\[(.*)\]\]>/', 'filter_xml', $response);	$response_xml = simplexml_load_string($response_xml);		$response = trim(htmlentities($response_xml->error));	$full_length = strlen($response);		#Remove HTML tag with content from the message, return from forum if email of user already exist.	if(strpos($response,'&lt;')) {		$bad_string = strpos($response,'&lt;');		$response = substr($response, 0, $bad_string-1);	}	# returning sso register response	return $response;		  }#Purpose: Function for forum SSO signin#parmeter: Array of user information required for forum sso signin#return: It returns user sso signin success/failed message.#Scope: local and global bothfunction forumSignin($user) {	# Changes the case of all keys in an array	$user = array_change_key_case($user);		foreach ($user as $key => $value) {	  if ($value === NULL)		 $user[$key] = '';	}	# Generating a URL-encoded query string from the $user array.		$parameters = http_build_query($user, NULL, '&'); 	$URL = "/register/setauthtoken?apikey=".API_KEY."&".$parameters;	# making a request using curl or file and getting response from the Website Toolbox.	$response_xml = doHTTPCall($URL);	$response_xml = preg_replace_callback('/<!\[CDATA\[(.*)\]\]>/', 'filter_xml', $response_xml);	$response_xml = simplexml_load_string($response_xml);		$authtoken = htmlentities($response_xml->authtoken);	if ($authtoken) {		$_SESSION['authtoken'] = $authtoken;		echo "<img src='http://".HOST."/register/dologin?authtoken=$authtoken' border='0' width='1' height='1' alt=''>";		echo "Login Successful";		} else {		return $response_xml->errormessage;	}  	}#Purpose: Function for forum SSO sign out#parmeter: Array of user information required for forum sso signout#Reset authtoken session variale.#return: It returns user sso signout success/failed message.#Scope: local and global bothfunction forumSignout() {		if($_SESSION['authtoken']) {		echo "<img src='http://".HOST."/register/logout?authtoken=".$_SESSION['authtoken']."' border='0' width='1' height='1' alt=''>";		# Reset authtoken session variable		$_SESSION['authtoken'] = '';		echo "Logout Successful";		} else {		echo "Logout Failed";	}	}?>